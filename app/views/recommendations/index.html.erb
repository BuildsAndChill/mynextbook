<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

    
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-3xl font-bold text-gray-900 mb-4">Get Your Next Book</h1>
      <p class="text-lg text-gray-600">Tell us what you're in the mood for, we'll find your perfect next read</p>
      
      <!-- Chat Interface Link -->
      <div class="mt-6">
        <a href="/recommendations/chat" 
           class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white text-sm font-medium rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 transform hover:scale-105">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          Try AI Chat Interface
        </a>
        <p class="text-sm text-gray-500 mt-2">New! Natural conversation with your AI librarian</p>
      </div>
    </div>

    <!-- Main Content: 2-Column Layout -->
    <div class="grid lg:grid-cols-2 gap-8 mb-12">
      
      <!-- Left Column: Initial Context Input -->
      <div class="bg-white rounded-2xl shadow-lg p-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-6">What are you in the mood for?</h2>
        
        <%= form_with url: recommendations_path, method: :post, local: true, class: "space-y-6", data: { turbo: false, controller: "form" } do %>
          <!-- Context Textarea -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Describe your reading mood</label>
            <%= text_area_tag :context, params[:context], 
                rows: 4, 
                class: "block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none",
                placeholder: "e.g. 'After Sapiens, I want tech & society, optimistic tone, 250â€“350 pages'",
                required: true %>
            <p class="mt-2 text-sm text-gray-500">Be specific about genre, tone, length, or what you want to explore next</p>
          </div>
          
          <!-- Tone Chips -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-3 text-left">Tone & Style</label>
            <div class="flex flex-wrap gap-2 justify-center">
              <% ['Deep dive', 'Fast-paced', 'Optimistic', 'Thoughtful', 'Adventure', 'Cozy', 'Challenging', 'Light'].each do |tone| %>
                <label class="relative">
                  <%= check_box_tag 'tone_chips[]', tone, false, class: 'sr-only' %>
                  <span class="inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-gray-50 border border-gray-200 text-gray-600 cursor-pointer hover:bg-gray-100 transition-colors duration-200">
                    <%= tone %>
                  </span>
                </label>
              <% end %>
            </div>
          </div>
          
          <!-- Include Reading History - Only for signed-in users -->
          <% if user_signed_in? %>
            <div>
              <label class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-100 transition-colors duration-200">
                <div class="flex items-center">
                  <div class="relative">
                    <%= check_box_tag :include_history, '1', false, class: "sr-only" %>
                    <div class="w-6 h-6 bg-white border-2 border-gray-300 rounded-md flex items-center justify-center transition-all duration-200">
                      <svg class="w-4 h-4 text-white opacity-0 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                      </svg>
                    </div>
                  </div>
                  <div class="ml-3">
                    <span class="text-sm font-medium text-gray-700">Include my reading history</span>
                    <p class="text-xs text-gray-500">Use your past reads for better recommendations</p>
                  </div>
                </div>
                <div class="flex items-center">
                  <div class="w-10 h-6 bg-gray-200 rounded-full transition-colors duration-200">
                    <div class="w-4 h-4 bg-white rounded-full shadow transform transition-transform duration-200 translate-x-0.5 translate-y-0.5"></div>
                  </div>
                </div>
              </label>
            </div>
          <% end %>
          
          <!-- Submit Button -->
          <button type="submit" class="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-indigo-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 flex items-center justify-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
            Get My Recommendations
          </button>
        <% end %>
      </div>
      
      <!-- Right Column: Empty Suggestions Panel -->
      <%= render 'suggestions', is_refined: false, show_empty_state: true %>
    </div>
  </div>
</div>

<script>
// Handle tone chip selection
document.addEventListener('DOMContentLoaded', function() {
  const toneChips = document.querySelectorAll('input[name="tone_chips[]"]');
  
  toneChips.forEach(chip => {
    chip.addEventListener('change', function() {
      const span = this.nextElementSibling;
      if (this.checked) {
        span.classList.remove('bg-gray-50', 'border-gray-200', 'text-gray-600');
        span.classList.add('bg-indigo-100', 'border-indigo-300', 'text-indigo-700');
      } else {
        span.classList.remove('bg-indigo-100', 'border-indigo-300', 'text-indigo-700');
        span.classList.add('bg-gray-50', 'border-gray-200', 'text-gray-600');
      }
    });
  });

  // Handle history toggle for signed-in users
  const historyToggle = document.querySelector('input[name="include_history"]');
  if (historyToggle) {
    const toggleContainer = historyToggle.closest('label');
    const checkbox = toggleContainer.querySelector('input[type="checkbox"]');
    const checkmark = toggleContainer.querySelector('svg');
    const toggleSwitch = toggleContainer.querySelector('.w-10.h-6');
    const toggleCircle = toggleContainer.querySelector('.w-4.h-4');
    
    toggleContainer.addEventListener('click', function(e) {
      e.preventDefault();
      checkbox.checked = !checkbox.checked;
      
      if (checkbox.checked) {
        // Checked state
        checkmark.classList.remove('opacity-0');
        toggleSwitch.classList.remove('bg-gray-200');
        toggleSwitch.classList.add('bg-indigo-600');
        toggleCircle.classList.remove('translate-x-0.5');
        toggleCircle.classList.add('translate-x-4');
      } else {
        // Unchecked state
        checkmark.classList.add('opacity-0');
        toggleSwitch.classList.remove('bg-indigo-600');
        toggleSwitch.classList.add('bg-gray-200');
        toggleCircle.classList.remove('translate-x-4');
        toggleCircle.classList.add('translate-x-0.5');
      }
    });
  }

  // Handle form submission
  const form = document.querySelector('form');
  if (form) {
    form.addEventListener('submit', function(e) {
      // Validate context is not empty
      const context = document.querySelector('textarea[name="context"]').value.trim();
      if (!context) {
        e.preventDefault();
        alert('Please describe what you\'re in the mood for reading.');
        return;
      }
      
      // Show loading state
      const submitBtn = form.querySelector('button[type="submit"]');
      const originalText = submitBtn.innerHTML;
      submitBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Getting recommendations...';
      submitBtn.disabled = true;
      
      // Re-enable button after a delay (in case of errors)
      setTimeout(() => {
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
      }, 10000);
    });
  }
});
</script>
