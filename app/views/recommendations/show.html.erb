<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">


    <!-- Main Content: 2-Column Layout -->
    <div class="grid lg:grid-cols-2 gap-8">
      
      <!-- Left Column: Refine Form -->
      <div class="bg-white rounded-2xl shadow-lg p-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-6">Refine Suggestions</h2>
        

        
        <% if debug_mode? %>
          <!-- Debug Info for Refine Form -->
          <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded text-xs">
            <strong>Refine Form Debug:</strong><br>
            @ai_response present: <%= @ai_response.present? %><br>
            @parsed_response present: <%= @parsed_response.present? %><br>
            @parsed_response keys: <%= @parsed_response&.keys&.inspect %><br>
            @parsed_response[:picks] count: <%= @parsed_response&.dig(:picks)&.count || 0 %><br>
            @parsed_response[:picks] first item: <%= @parsed_response&.dig(:picks, 0)&.inspect %><br>
            @parsed_response[:brief] present: <%= @parsed_response&.dig(:brief).present? %><br>
            @parsed_response[:brief] keys: <%= @parsed_response&.dig(:brief)&.keys&.inspect %><br>
            @user_prompt present: <%= @user_prompt.present? %><br>
            @user_prompt preview: <%= @user_prompt&.truncate(100) %><br>
            Session refined_session_id: <%= session[:refined_session_id] %>
          </div>
        <% end %>
        
        <%= form_with url: refine_recommendations_path, method: :post, local: true, class: "space-y-6", data: { turbo: false, controller: "form" } do %>
          <!-- Hidden fields for context -->
          <%= hidden_field_tag :context, params[:context] %>
          
          <!-- Refinement Input -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">How would you like to refine these suggestions?</label>
            
            <!-- Quick Refinement Suggestions -->
            <div class="mb-4">
              <p class="text-sm text-gray-600 mb-3">Quick suggestions:</p>
              <div class="flex flex-wrap gap-2">
                                 <button type="button" 
                         data-refinement="Shorter books please"
                         class="refinement-chip inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-blue-50 border border-blue-200 text-blue-600 cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                   Shorter books
                 </button>
                 <button type="button" 
                         data-refinement="Different genre"
                         class="refinement-chip inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-blue-50 border border-blue-200 text-blue-600 cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                   Different genre
                 </button>
                 <button type="button" 
                         data-refinement="More recent books"
                         class="refinement-chip inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-blue-50 border border-blue-200 text-blue-600 cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                   More recent
                 </button>
                 <button type="button" 
                         data-refinement="Less challenging"
                         class="refinement-chip inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-blue-50 border border-blue-200 text-blue-600 cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                   Less challenging
                 </button>
                 <button type="button" 
                         data-refinement="More adventurous"
                         class="refinement-chip inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-blue-50 border border-blue-200 text-blue-600 cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                   More adventurous
                 </button>
                 <button type="button" 
                         data-refinement="Similar to what I liked"
                         class="refinement-chip inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-blue-50 border border-blue-200 text-blue-600 cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                   Similar to likes
                 </button>
              </div>
            </div>
            
            <%= text_area_tag :refinement_text, params[:refinement], 
                rows: 4, 
                class: "block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none",
                placeholder: "e.g. 'More sci-fi, less fantasy' or 'Shorter books please'",
                required: true %>
            <p class="mt-2 text-sm text-gray-500">Be specific about what you'd like to change or explore</p>
          </div>
          
          <!-- Submit Button -->
          <button type="submit" id="refine-button" class="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-indigo-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed">
            <!-- Spinner (hidden by default) -->
            <svg id="refine-spinner" class="hidden w-5 h-5 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span id="refine-text">Refine Suggestions</span>
          </button>
          
          <!-- New Search Button -->
          <div class="pt-6">
            <div class="text-center">
              <span class="text-sm text-gray-500 mb-3 block">Not quite what you're looking for?</span>
              <a href="/recommendations" 
                 class="inline-flex items-center justify-center w-full px-6 py-3 bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 text-gray-700 font-medium rounded-xl hover:from-gray-100 hover:to-gray-200 hover:border-gray-300 transition-all duration-200 transform hover:scale-[1.02]">
                Start New Search
              </a>
            </div>
          </div>
        <% end %>
      </div>
      
      <!-- Right Column: Book Suggestions -->
      <%= render 'suggestions', is_refined: @show_refined_message %>
    </div>
  </div>
</div>

<script>
  // Handle refinement chip clicks
  document.addEventListener('DOMContentLoaded', function() {
    const refinementChips = document.querySelectorAll('.refinement-chip');
    
    refinementChips.forEach(chip => {
      chip.addEventListener('click', function() {
        const refinementText = this.getAttribute('data-refinement');
        console.log('Refinement chip clicked:', refinementText);
        
        const refinementTextarea = document.querySelector('textarea[name="refinement_text"]');
        console.log('Found textarea:', refinementTextarea);
        
        if (refinementTextarea) {
          refinementTextarea.value = refinementText;
          refinementTextarea.focus();
          // Scroll to the textarea to make it visible
          refinementTextarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
          console.log('Textarea value set to:', refinementTextarea.value);
        } else {
          console.error('Textarea not found!');
        }
      });
    });
  });
  
  // Function to show book details
  function showBookDetails(title, author) {
    // Search for the book on Google Books
    const searchQuery = encodeURIComponent(`${title} ${author}`);
    window.open(`https://www.google.com/search?tbm=bks&q=${searchQuery}`, '_blank');
  }
  
  // Function to add book to library
  function addToLibrary(title, author) {
    <% if user_signed_in? %>
      // User is signed in, redirect to add book form
      window.location.href = '<%= new_book_path %>?title=' + encodeURIComponent(title) + '&author=' + encodeURIComponent(author);
    <% else %>
      // User is not signed in, show signup popup
      alert('Please sign up to add books to your personal library and track your reading progress!');
    <% end %>
  }
  
  // Function to scroll to refine form
  function scrollToRefineForm() {
    const refineForm = document.querySelector('.bg-white.rounded-2xl.shadow-lg');
    if (refineForm) {
      refineForm.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }
  
  // Handle feedback button clicks
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('feedback-btn')) {
      console.log('Feedback button clicked:', e.target.dataset);
      const bookTitle = e.target.dataset.bookTitle;
      const bookAuthor = e.target.dataset.bookAuthor;
      const feedback = e.target.dataset.feedback;
      
      console.log('Feedback submitted:', { bookTitle, bookAuthor, feedback });
      
      // Check if user is signed in
      const isSignedIn = <%= user_signed_in? ? 'true' : 'false' %>;
      
      if (!isSignedIn) {
        // Show signup popup for unlogged users
        alert('Please sign up to save your feedback and get better recommendations!');
        return;
      }
      
      // Visual feedback
      e.target.classList.add('scale-110');
      setTimeout(() => {
        e.target.classList.remove('scale-110');
      }, 200);
      
      // Submit feedback to server
      const formData = new FormData();
      formData.append('book_title', bookTitle);
      formData.append('book_author', bookAuthor);
      formData.append('feedback_type', feedback);
      formData.append('context', document.querySelector('textarea[name="context"]')?.value || '');
      
      // Debug CSRF token
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      console.log('CSRF Token found for feedback:', csrfToken ? 'Yes' : 'No');
      if (!csrfToken) {
        console.error('CSRF token not found for feedback!');
        alert('CSRF token missing. Please refresh the page.');
        return;
      }
      
      fetch('/recommendations/feedback', {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        if (response.ok) {
          // Show appropriate message based on feedback type
          const feedbackMessages = {
            'like': 'Thanks! We\'ll recommend more like this.',
            'dislike': 'Got it! We\'ll avoid similar books.',
            'save': 'Book saved to your reading list!',
            'more_info': 'Book details expanded!'
          };
          
          alert(feedbackMessages[feedback] || 'Feedback recorded!');
          
          // If it's a save action, update the button to show it's saved
          if (feedback === 'save') {
            e.target.classList.add('text-blue-600');
            e.target.title = 'Saved to reading list';
          }
        } else {
          alert('Error saving feedback. Please try again.');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error saving feedback. Please try again.');
      });
    }
  });
  
  // Handle refine button loading state
  const refineForm = document.querySelector('form[action*="refine"]');
  const refineButton = document.getElementById('refine-button');
  const refineSpinner = document.getElementById('refine-spinner');
  const refineIcon = document.getElementById('refine-icon');
  const refineText = document.getElementById('refine-text');
  
  if (refineForm && refineButton) {
    refineForm.addEventListener('submit', function() {
      // Show loading state
      refineButton.disabled = true;
      refineSpinner.classList.remove('hidden');
      refineIcon.classList.add('hidden');
      refineText.textContent = 'Refining...';
      
      // Add loading styles
      refineButton.classList.add('opacity-50', 'cursor-not-allowed');
      refineButton.classList.remove('hover:from-indigo-700', 'hover:to-purple-700', 'hover:scale-105');
    });
  }
</script>
