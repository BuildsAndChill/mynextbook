#!/usr/bin/env ruby

# Script de test pour v√©rifier la configuration Resend
# Usage: ruby script/test_resend.rb

require_relative '../config/environment'

puts "üß™ Test de la configuration Resend"
puts "=================================="

# V√©rifier les variables d'environnement
puts "\nüìã Variables d'environnement:"
puts "RESEND_API_KEY: #{ENV['RESEND_API_KEY'] ? '‚úÖ D√©finie' : '‚ùå Non d√©finie'}"
puts "RESEND_DOMAIN: #{ENV['RESEND_DOMAIN'] ? '‚úÖ D√©finie' : '‚ùå Non d√©finie'}"

# V√©rifier la configuration ActionMailer
puts "\nüìß Configuration ActionMailer:"
puts "Delivery method: #{ActionMailer::Base.delivery_method}"
puts "SMTP settings: #{ActionMailer::Base.smtp_settings}" if ActionMailer::Base.delivery_method == :smtp
puts "Resend settings: #{ActionMailer::Base.resend_settings}" if ActionMailer::Base.delivery_method == :resend

# V√©rifier que la gem Resend est disponible
puts "\nüîß Gem Resend:"
begin
  require 'resend'
  puts "‚úÖ Gem Resend charg√©e avec succ√®s"
  puts "Version: #{Resend::VERSION}"
rescue LoadError => e
  puts "‚ùå Erreur lors du chargement de Resend: #{e.message}"
end

# Test de cr√©ation d'un client Resend (si API key disponible)
if ENV['RESEND_API_KEY'].present?
  puts "\nüöÄ Test de cr√©ation du client Resend:"
  begin
    resend = Resend::Client.new(api_key: ENV['RESEND_API_KEY'])
    puts "‚úÖ Client Resend cr√©√© avec succ√®s"
    
    # Test d'envoi d'email (optionnel, comment√© pour √©viter l'envoi r√©el)
    # puts "\nüì§ Test d'envoi d'email (simulation):"
    # puts "‚úÖ Configuration pr√™te pour l'envoi d'emails"
    
  rescue => e
    puts "‚ùå Erreur lors de la cr√©ation du client Resend: #{e.message}"
  end
else
  puts "\n‚ö†Ô∏è RESEND_API_KEY non d√©finie, impossible de tester le client"
end

puts "\n‚ú® Test termin√©!"
